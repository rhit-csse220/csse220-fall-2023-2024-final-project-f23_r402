a. Diversity calculation
    O(N) + O(N^2) + O(N) - initial cycle, readData1n0() for each chromosome, and another O(N) cycle
    Average time of the executrion of this method for an evolution of 100 generations with a population
    of 100 and genome length of 20 and the truncation selection method was *298,202* nanoseconds


b. Fitness calculation function
    At the moment, Chromosome.calcFitnessFunction() calculates the fitness score
    with N operations, meaning that its Big-O is O(N).

    Average time of the executrion of this method for an evolution of 100 generations with a population
    of 100 and genome length of 20 and the truncation selection method was *552* nanoseconds
    
    Theoretically, it can be improved to O(1) if Chromosome.fitnessScore is calculated
    automatically in every method that changes the fitness score. Currently, these
    methods rely on calling Chromosome.calcFitnessFunction() at the end, but we can change
    it and improve efficiency.

    However, we decided not to do it because it would require a lot of hard coding since we
    added new fitness functions, whereas the current way is less efficient in terms of Big-O,
    but much more efficient for reusing the code.


c. Roulette wheel selection function
    Fist, Population.sortPopulation() performs at O(NlogN)
    Second, Population.createLine() - O(N)-calculateAvgFitness + O(N)-calculateHammingDistance + 3*O(N)-calculateTotalNumsOf...
        (This step can potentially be made more efficient by (at least) putting all calculations of totalNums in one function, but
        since it will still be O(N), we decided not to procede with this for the sake of making our code more readable and understandable)

    Third, Population.findRouletteList() - O((N + N + N + N-removeAll) * numberOfRecursions = N) => O(N^2)
    Then sorting, O(NlogN)
    Then, O(elitismPercentage)
    Then, O(N) for performCrossover
    Then, O(N/2)
    Then, O(N) again
    Then, O(NlogN)

    Overall, this function comes down to being an O(N^2) function

    Average time of the executrion of this method for an evolution of 100 generations with a population
    of 100 and genome length of 20 and the roulette selection method was *5,143,849* nanoseconds

    Because of the way we implemented the evolution, we never call calculations of the fitness score directly since we always
    create a set of new chromosomes. We only call getFitnessScore(). However, when we create a new Chromosome, the calcFitnessScore()
    method is called once, which is N times per the selection method call.
    And we also call calculateAvgFitness() once